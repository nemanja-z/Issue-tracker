diff --git a/node_modules/sequelize/lib/sequelize.js b/node_modules/sequelize/lib/sequelize.js
index 21709ca..e70898f 100644
--- a/node_modules/sequelize/lib/sequelize.js
+++ b/node_modules/sequelize/lib/sequelize.js
@@ -182,11 +182,10 @@ class Sequelize {
       config = {};
       options = username || {};
 
-      const urlParts = url.parse(arguments[0], true);
-
+      //const urlParts = url.parse(arguments[0], true);
+      const urlParts = url.parse(options.use_env_variable, true);
       options.dialect = urlParts.protocol.replace(/:$/, '');
       options.host = urlParts.hostname;
-
       if (options.dialect === 'sqlite' && urlParts.pathname && !urlParts.pathname.startsWith('/:memory')) {
         const storagePath = path.join(options.host, urlParts.pathname);
         options.storage = path.resolve(options.storage || storagePath);
@@ -435,7 +434,7 @@ class Sequelize {
     options.modelName = modelName;
     options.sequelize = this;
 
-    const model = class extends Model {};
+    const model = class extends Model { };
 
     model.init(attributes, options);
 
@@ -646,7 +645,7 @@ class Sequelize {
     if (this.options.dialect !== 'mysql') {
       throw new Error('sequelize.set is only supported for mysql');
     }
-    if (!options.transaction || !(options.transaction instanceof Transaction) ) {
+    if (!options.transaction || !(options.transaction instanceof Transaction)) {
       throw new TypeError('options.transaction is required');
     }
 
@@ -657,8 +656,7 @@ class Sequelize {
 
     // Generate SQL Query
     const query =
-      `SET ${
-        _.map(variables, (v, k) => `@${k} := ${typeof v === 'string' ? `"${v}"` : v}`).join(', ')}`;
+      `SET ${_.map(variables, (v, k) => `@${k} := ${typeof v === 'string' ? `"${v}"` : v}`).join(', ')}`;
 
     return await this.query(query, options);
   }
@@ -1216,8 +1214,8 @@ class Sequelize {
     if (Object.prototype.hasOwnProperty.call(attribute, 'defaultValue')) {
       if (typeof attribute.defaultValue === 'function' && (
         attribute.defaultValue === DataTypes.NOW ||
-          attribute.defaultValue === DataTypes.UUIDV1 ||
-          attribute.defaultValue === DataTypes.UUIDV4
+        attribute.defaultValue === DataTypes.UUIDV1 ||
+        attribute.defaultValue === DataTypes.UUIDV4
       )) {
         attribute.defaultValue = new attribute.defaultValue();
       }
@@ -1240,82 +1238,85 @@ class Sequelize {
   }
 }
 
-// Aliases
-Sequelize.prototype.fn = Sequelize.fn;
-Sequelize.prototype.col = Sequelize.col;
-Sequelize.prototype.cast = Sequelize.cast;
-Sequelize.prototype.literal = Sequelize.literal;
-Sequelize.prototype.and = Sequelize.and;
-Sequelize.prototype.or = Sequelize.or;
-Sequelize.prototype.json = Sequelize.json;
-Sequelize.prototype.where = Sequelize.where;
-Sequelize.prototype.validate = Sequelize.prototype.authenticate;
+  // Aliases
+  Sequelize.prototype.fn = Sequelize.fn;
+  Sequelize.prototype.col = Sequelize.col;
+  Sequelize.prototype.cast = Sequelize.cast;
+  Sequelize.prototype.literal = Sequelize.literal;
+  Sequelize.prototype.and = Sequelize.and;
+  Sequelize.prototype.or = Sequelize.or;
+  Sequelize.prototype.json = Sequelize.json;
+  Sequelize.prototype.where = Sequelize.where;
+  Sequelize.prototype.validate = Sequelize.prototype.authenticate;
 
-/**
- * Sequelize version number.
- */
-Sequelize.version = require('../package.json').version;
+  /**
+   * Sequelize version number.
+   */
+  Sequelize.version = require('../package.json').version;
 
-Sequelize.options = { hooks: {} };
+  Sequelize.options = {
+  hooks: {
+}
+};
 
-/**
- * @private
- */
-Sequelize.Utils = Utils;
+  /**
+   * @private
+   */
+  Sequelize.Utils = Utils;
 
-/**
- * Operators symbols to be used for querying data
- *
- * @see  {@link Operators}
- */
-Sequelize.Op = Op;
+  /**
+   * Operators symbols to be used for querying data
+   *
+   * @see  {@link Operators}
+   */
+  Sequelize.Op = Op;
 
-/**
- * Available table hints to be used for querying data in mssql for table hints
- *
- * @see {@link TableHints}
- */
-Sequelize.TableHints = TableHints;
+  /**
+   * Available table hints to be used for querying data in mssql for table hints
+   *
+   * @see {@link TableHints}
+   */
+  Sequelize.TableHints = TableHints;
 
-/**
- * Available index hints to be used for querying data in mysql for index hints
- *
- * @see {@link IndexHints}
- */
-Sequelize.IndexHints = IndexHints;
+  /**
+   * Available index hints to be used for querying data in mysql for index hints
+   *
+   * @see {@link IndexHints}
+   */
+  Sequelize.IndexHints = IndexHints;
 
-/**
- * A reference to the sequelize transaction class. Use this to access isolationLevels and types when creating a transaction
- *
- * @see {@link Transaction}
- * @see {@link Sequelize.transaction}
- */
-Sequelize.Transaction = Transaction;
+  /**
+   * A reference to the sequelize transaction class. Use this to access isolationLevels and types when creating a transaction
+   *
+   * @see {@link Transaction}
+   * @see {@link Sequelize.transaction}
+   */
+  Sequelize.Transaction = Transaction;
 
-/**
- * A reference to Sequelize constructor from sequelize. Useful for accessing DataTypes, Errors etc.
- *
- * @see {@link Sequelize}
- */
-Sequelize.prototype.Sequelize = Sequelize;
+  /**
+   * A reference to Sequelize constructor from sequelize. Useful for accessing DataTypes, Errors etc.
+   *
+   * @see {@link Sequelize}
+   */
+  Sequelize.prototype.Sequelize = Sequelize;
 
-/**
- * Available query types for use with `sequelize.query`
- *
- * @see {@link QueryTypes}
- */
-Sequelize.prototype.QueryTypes = Sequelize.QueryTypes = QueryTypes;
+  /**
+   * Available query types for use with `sequelize.query`
+   *
+   * @see {@link QueryTypes}
+   */
+  Sequelize.prototype.QueryTypes = Sequelize.QueryTypes = QueryTypes;
 
-/**
- * Exposes the validator.js object, so you can extend it with custom validation functions. The validator is exposed both on the instance, and on the constructor.
- *
- * @see https://github.com/chriso/validator.js
- */
-Sequelize.prototype.Validator = Sequelize.Validator = Validator;
+  /**
+   * Exposes the validator.js object, so you can extend it with custom validation functions. The validator is exposed both on the instance, and on the constructor.
+   *
+   * @see https://github.com/chriso/validator.js
+   */
+  Sequelize.prototype.Validator = Sequelize.Validator = Validator;
 
-Sequelize.Model = Model;
+  Sequelize.Model = Model;
 
-Sequelize.DataTypes = DataTypes;
+  Sequelize.DataTypes = DataTypes;
 for (const dataType in DataTypes) {
   Sequelize[dataType] = DataTypes[dataType];
 }
